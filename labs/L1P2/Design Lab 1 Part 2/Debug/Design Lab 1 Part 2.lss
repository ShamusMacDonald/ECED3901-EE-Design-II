
Design Lab 1 Part 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  0000022c  000002c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800150  00800150  00000310  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9b  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000919  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000406  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c4  00000000  00000000  00001c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000110  00000000  00000000  00002118  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00002228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_6>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec e2       	ldi	r30, 0x2C	; 44
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 35       	cpi	r26, 0x50	; 80
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e5       	ldi	r26, 0x50	; 80
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a6 35       	cpi	r26, 0x56	; 86
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  b2:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <__vector_6>:
	PIN Change ISR for PC0.
	Measures the frequency and duty cycle of PWM waveforms and outputs the values
	over UART Baud 115200.	
*/
ISR(PCINT2_vect)
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 93       	push	r18
  c6:	3f 93       	push	r19
  c8:	4f 93       	push	r20
  ca:	5f 93       	push	r21
  cc:	6f 93       	push	r22
  ce:	7f 93       	push	r23
  d0:	8f 93       	push	r24
  d2:	9f 93       	push	r25
  d4:	af 93       	push	r26
  d6:	bf 93       	push	r27
  d8:	ef 93       	push	r30
  da:	ff 93       	push	r31
//	static uint16_t duty;
//	static uint8_t falling = 0;
//	static uint8_t first_rise = 1;
//	static uint16_t freq;
		
	if(PINC & 0x01) {
  dc:	30 9b       	sbis	0x06, 0	; 6
  de:	05 c0       	rjmp	.+10     	; 0xea <__vector_6+0x30>
		//	This will reset the pulse we are measuring 
			first_rise = 1;
			falling = 0;
			
		}*/
	printf("HIGH\n");
  e0:	8c e1       	ldi	r24, 0x1C	; 28
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <puts>
  e8:	04 c0       	rjmp	.+8      	; 0xf2 <__vector_6+0x38>
	}
	else {
		printf("LOW\n");
  ea:	81 e2       	ldi	r24, 0x21	; 33
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <puts>
	// This handles the falling edge of the PWM period 
		t_high = ((uint16_t)TCNT1L) | ((uint16_t)TCNT1H<<8);
		falling = 0;
	}
*/
}
  f2:	ff 91       	pop	r31
  f4:	ef 91       	pop	r30
  f6:	bf 91       	pop	r27
  f8:	af 91       	pop	r26
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	7f 91       	pop	r23
 100:	6f 91       	pop	r22
 102:	5f 91       	pop	r21
 104:	4f 91       	pop	r20
 106:	3f 91       	pop	r19
 108:	2f 91       	pop	r18
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <main>:

int main(void)
{
	init_uart();
 114:	0e 94 c6 00 	call	0x18c	; 0x18c <init_uart>
/*	Set DDR */
	DDRB |= (1<<PB3) | (1<<PB4);	
 118:	84 b1       	in	r24, 0x04	; 4
 11a:	88 61       	ori	r24, 0x18	; 24
 11c:	84 b9       	out	0x04, r24	; 4
	DDRC &= (0<<PC0);
 11e:	87 b1       	in	r24, 0x07	; 7
 120:	17 b8       	out	0x07, r1	; 7
/*	Configure Fast PWM Mode	*/
	TCCR0A |= (1<<WGM00) | (1<<WGM01) | (1<<COM0B1) | (1<<COM0A1);
 122:	84 b5       	in	r24, 0x24	; 36
 124:	83 6a       	ori	r24, 0xA3	; 163
 126:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<CS01);
 128:	85 b5       	in	r24, 0x25	; 37
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	85 bd       	out	0x25, r24	; 37
/*	Set one wave to have 25% duty cycle and one to have 75% duty cycle */
	OCR0A = 64;
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	87 bd       	out	0x27, r24	; 39
	OCR0B = 191;
 132:	8f eb       	ldi	r24, 0xBF	; 191
 134:	88 bd       	out	0x28, r24	; 40
/*	Enable TIMER1 with prescale factor 8 */
	TCCR1B = (1<<CS11);
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
/*	Enable PCINT on PC0 */
	PCICR |= (1<<PCIE2);			
 13c:	e8 e6       	ldi	r30, 0x68	; 104
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	84 60       	ori	r24, 0x04	; 4
 144:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT16);
 146:	ed e6       	ldi	r30, 0x6D	; 109
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
	sei(); 
 150:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	8f ef       	ldi	r24, 0xFF	; 255
 156:	9c e2       	ldi	r25, 0x2C	; 44
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x44>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x4e>
 162:	00 00       	nop
 164:	ff cf       	rjmp	.-2      	; 0x164 <main+0x50>

00000166 <uart_putchar>:
 166:	e0 ec       	ldi	r30, 0xC0	; 192
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	90 81       	ld	r25, Z
 16c:	95 ff       	sbrs	r25, 5
 16e:	fd cf       	rjmp	.-6      	; 0x16a <uart_putchar+0x4>
 170:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret

0000017a <uart_getchar>:
 17a:	e0 ec       	ldi	r30, 0xC0	; 192
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	88 23       	and	r24, r24
 182:	ec f7       	brge	.-6      	; 0x17e <uart_getchar+0x4>
 184:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	08 95       	ret

0000018c <init_uart>:
 18c:	e1 ec       	ldi	r30, 0xC1	; 193
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	88 61       	ori	r24, 0x18	; 24
 194:	80 83       	st	Z, r24
 196:	e2 ec       	ldi	r30, 0xC2	; 194
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	86 60       	ori	r24, 0x06	; 6
 19e:	80 83       	st	Z, r24
 1a0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1a4:	87 e0       	ldi	r24, 0x07	; 7
 1a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1aa:	e0 e5       	ldi	r30, 0x50	; 80
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	8e e0       	ldi	r24, 0x0E	; 14
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	93 83       	std	Z+3, r25	; 0x03
 1b4:	82 83       	std	Z+2, r24	; 0x02
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	91 e0       	ldi	r25, 0x01	; 1
 1ba:	91 83       	std	Z+1, r25	; 0x01
 1bc:	80 83       	st	Z, r24
 1be:	85 e2       	ldi	r24, 0x25	; 37
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <puts>
 1c6:	08 95       	ret

000001c8 <puts>:
 1c8:	0f 93       	push	r16
 1ca:	1f 93       	push	r17
 1cc:	cf 93       	push	r28
 1ce:	df 93       	push	r29
 1d0:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <__data_end+0x2>
 1d4:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <__data_end+0x3>
 1d8:	23 81       	ldd	r18, Z+3	; 0x03
 1da:	21 ff       	sbrs	r18, 1
 1dc:	1b c0       	rjmp	.+54     	; 0x214 <puts+0x4c>
 1de:	8c 01       	movw	r16, r24
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
 1e2:	c0 e0       	ldi	r28, 0x00	; 0
 1e4:	f8 01       	movw	r30, r16
 1e6:	81 91       	ld	r24, Z+
 1e8:	8f 01       	movw	r16, r30
 1ea:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <__data_end+0x2>
 1ee:	70 91 53 01 	lds	r23, 0x0153	; 0x800153 <__data_end+0x3>
 1f2:	db 01       	movw	r26, r22
 1f4:	18 96       	adiw	r26, 0x08	; 8
 1f6:	ed 91       	ld	r30, X+
 1f8:	fc 91       	ld	r31, X
 1fa:	19 97       	sbiw	r26, 0x09	; 9
 1fc:	88 23       	and	r24, r24
 1fe:	31 f0       	breq	.+12     	; 0x20c <puts+0x44>
 200:	09 95       	icall
 202:	89 2b       	or	r24, r25
 204:	79 f3       	breq	.-34     	; 0x1e4 <puts+0x1c>
 206:	df ef       	ldi	r29, 0xFF	; 255
 208:	cf ef       	ldi	r28, 0xFF	; 255
 20a:	ec cf       	rjmp	.-40     	; 0x1e4 <puts+0x1c>
 20c:	8a e0       	ldi	r24, 0x0A	; 10
 20e:	09 95       	icall
 210:	89 2b       	or	r24, r25
 212:	19 f0       	breq	.+6      	; 0x21a <puts+0x52>
 214:	8f ef       	ldi	r24, 0xFF	; 255
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	02 c0       	rjmp	.+4      	; 0x21e <puts+0x56>
 21a:	8d 2f       	mov	r24, r29
 21c:	9c 2f       	mov	r25, r28
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
